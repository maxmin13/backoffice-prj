
Configure a local development environment with Eclipse to develop the Java backoffice web application.

###################################################################
# Clone the project from github
###################################################################

git clone git@github.com:maxmin13/backoffice-prj.git

cd project/
mvn -DskipTests test-compile jar:test-jar install
mvn clean install

###################################################################
# Configure the project in eclipse
###################################################################

In Eclipse for Enterprise Java developers:
menu File, import, Existing Maven project
in the Root Directory input box, select the directory that contains the parent pom of the project,
ex:
/home/vagrant/workspace/backoffice-prj/project
click Finish 

right click on backoffice-prj
manven, Update project

if a project doesn't see test classes of another project:

righ click on the project
select Projects
check that the project configured under Classpath has: Without test code: No

###################################################################
# Install Tomcat webserver Eclipse plugin:
###################################################################

cd /opt
wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.20/bin/apache-tomcat-10.1.20.tar.gz
tar xvzf apache-tomcat-10.1.20.tar.gz              

click on servers tab at the bottom side of the IDE, right click on blank area, New, Servers, 
select Tomcat v10.1 Server,
click next, click on Add.. link, click Browse button, select root folder of the previously installed Tomcat server, 
click Open, click Finish, next, addAll, Finish.


###################################################################
# Run unit tests and integration tests with Maven:
###################################################################

// in Fedora 40 it was necessary to install:
sudo dnf install ncurses-compat-libs
sudo dnf install libxcrypt-compat

// make sure that the IP address in datasources.properties is the same as the one configured in pom.xml, see: docker.mariadb.ip.address
mariadb.url=jdbc:mariadb://172.20.128.2:3306/backofficedb 

cd project

mvn clean install

// run all integration tests
mvn clean install -Pintegration-tests

// run single feature file at the time
mvn clean install -Pintegration-tests -Dcucumber.filter.tags='@find_user_feature'
mvn clean install -Pintegration-tests -Dcucumber.filter.tags='@create_user_feature'

###################################################################
# Run Mariadb database and phpMyAdmin with Docker Compose:
###################################################################

----------------------------------------------------
mkdir /opt/integration

## copy Mariadb database scripts/ directory

{
 printf '%s\n' 'FROM mariadb:latest'
 printf '%s\n' 'COPY scripts /docker-entrypoint-initdb.d/'
 printf '%s\n' 'ARG DB'
 printf '%s\n' 'ARG DB_HOST'
 printf '%s\n' 'ARG DB_PORT'
 printf '%s\n' 'ARG DB_ROOT_PASSWORD'
 printf '%s\n' 'ARG DB_USER'
 printf '%s\n' 'ARG DB_USER_PASSWORD'
 printf '%s\n' ''
 printf '%s\n' 'ENV MARIADB_DATABASE=$DB'
 printf '%s\n' 'ENV MARIADB_ROOT_PASSWORD=$DB_ROOT_PASSWORD'
 printf '%s\n' 'ENV MARIADB_USER=$DB_USER'
 printf '%s\n' 'ENV MARIADB_PASSWORD=$DB_USER_PASSWORD'
 printf '%s\n' '' 
 printf '%s\n' 'EXPOSE $DB_PORT'
 printf '%s\n' ''
} >> Dockerfile  

mkdir /opt/integration/logs
mkdir /opt/integration/config

cd /opt/integration/config

{
 printf '%s\n' '[mariadb]'
 printf '%s\n' '### transaction-isolation = READ_UNCOMMITED'
 printf '%s\n' '### transaction-isolation = READ-COMMITTED'
 printf '%s\n' 'transaction-isolation = REPEATABLE-READ'
 printf '%s\n' '### transaction-isolation = SERIALIZABLE'
 printf '%s\n' ''  
 printf '%s\n' 'log_error=/var/log/mariadb/mariadb.log'
 printf '%s\n' 'log_warnings=9'
 printf '%s\n' 'slow_query_log=1'
 printf '%s\n' 'log_output=FILE'
 printf '%s\n' 'slow_query_log_file=/var/log/mariadb/mariadb_slow.log'
 printf '%s\n' 'long_query_time=2'
 printf '%s\n' 'log_queries_not_using_indexes=ON'
 printf '%s\n' 'log_slow_verbosity='full''

} >> mariadb.cnf  

cd /opt/integration

{
 printf '%s\n' 'services:'
 printf '%s\n' '  mariadb:'
 printf '%s\n' '    container_name: local-mariadb' 
 printf '%s\n' '    restart: always'
 printf '%s\n' '    volumes:' 
 printf '%s\n' '    - ./config/:/etc/mysql/mariadb.conf.d/' 
 printf '%s\n' '    - ./logs/:/var/lib/mysql/'  
 printf '%s\n' '    build:'
 printf '%s\n' '      context: .'
 printf '%s\n' '      args:'
 printf '%s\n' '        DB: backofficedb'
 printf '%s\n' '        DB_PORT: 3306'
 printf '%s\n' '        DB_ROOT_PASSWORD: rootpwd'
 printf '%s\n' '        DB_USER: admin'
 printf '%s\n' '        DB_USER_PASSWORD: adminpwd'
 printf '%s\n' '  phpmyadmin:'
 printf '%s\n' '    container_name: local-phpmyadmin' 
 printf '%s\n' '    image: phpmyadmin/phpmyadmin'
 printf '%s\n' '    restart: always'
 printf '%s\n' '    environment:'
 printf '%s\n' '      PMA_HOST: mariadb'
 printf '%s\n' '      PMA_USER: root'
 printf '%s\n' '      PMA_PASSWORD: rootpwd'
 printf '%s\n' '    ports:'
 printf '%s\n' '      - "8080:80"'
 printf '%s\n' '    depends_on:'
 printf '%s\n' '      - mariadb'
 printf '%s\n' ''
} >> docker-compose.yml

docker compose up
----------------------------------------------------

Access the phpMyAdmin using the URL:

http://localhost:8080/

Connect to the database from bash console:

----------------------------------------------------
# replace the right IP address
docker exec -it local-mariadb bash

mariadb -u root -prootpwd -h 172.17.0.2 backofficedb
mariadb -u admin -padminpwd -h 172.17.0.2 backofficedb

select * from User;

exit
----------------------------------------------------

Get the Mariadb container IP address:

----------------------------------------------------
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' local-mariadb 
----------------------------------------------------

// make sure that the IP address in datasources.properties is the same as the one configured in pom.xml, see: docker.mariadb.ip.address
mariadb.url=jdbc:mariadb://172.18.0.2:3306/backofficedb

Run the integration tests corresponding to a IT test runner, for ex: UserITRunner.java

tdx on UserITRunner.java,
run as Junit test

clear the env:

----------------------------------------------------------
docker compose down
----------------------------------------------------------

###################################################################
# Manually run unit tests and integration test:
###################################################################

start a local database (see above Docker configuration):

----------------------------------------------------------
cd /opt/integration
docker compose up
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' local-mariadb 
----------------------------------------------------------

edit backoffice-jpa-dao/src/test/resources/simple-jndi/datasources.properties

set 'mariadb.url' to the value of the local-mariadb container IP address, for ex:
mariadb.url=jdbc:mariadb://172.18.0.2:3306/backofficedb

in Eclipse, right-click on class: UserITRunner.java, Run As, Unit Test

###################################################################
# Run the backoffice web application locally:
###################################################################

in Eclipse, servers tab, edit contex.xml file, add:

        <Resource name="jdbc/musicdb" auth="Container" type="javax.sql.DataSource" 
                 driverClassName="org.mariadb.jdbc.Driver"
                 factory="org.apache.tomcat.jdbc.pool.DataSourceFactory" 
                 url="jdbc:mariadb://localhost:3306/musicdb"
                 username="prospring6" password="prospring6"
                 maxActive="20" maxIdle="10" maxWait="-1" />  

start the Tomcat server plugin.

in the browser enter: 

http://localhost:8080/backoffice/home

###################################################################
# AWS credentials:
###################################################################

Login in AWS management console as root,
go to Iam, Users,
create a new user, for ex: awsadmin/awsadmin
provide the user with access to the AWS Management Console.
Select the user and create an access key for Command Line Interface (CLI).
Associate the user with an identity-based policy that allows access to route53 webservices,
for ex: AmazonRoute53FullAccess
Associate the user with an identity-based policy that allows access to ec2 webservices,
for ex: AmazonEC2FullAccess.
e
In you terminal, install AWS Command Line Interface (CLI)

enter the access key, the secret access key, your AWS region:

aws configure

###################################################################
# Deploy the web application on AWS:
###################################################################

edit config/datacenter.json and config/hostedzone.json and set the Vpc and DNS values according to your AWS account: 

VPC CIDR (eg: "Cidr": "10.0.0.0/16")
VPC region (eg: "Region": "eu-west-1")
Availability zone (eg: "Az": "eu-west-1a")
Subnet CIDR (eg: "Cidr": "10.0.20.0/24")
Instance private IP (eg: "PrivateIp": "10.0.20.35")
Set instance user name and instance user password with your AWS user credentials
(Not mandatory) DNS registered domain (your domain registered with the AWS registrar, eg: "RegisteredDomain": "maxmin.it")

cd backoffice-prj/bin

export AWS_REMOTE_USER=awsadmin
export AWS_REMOTE_USER_PASSWORD=awsadmin

run:

chmod +x make.sh
./make.sh

###################################################################
# Log in the remote AWS instance:
###################################################################

cd backoffice-prj/access

rm -f ~/.ssh/known_hosts && ssh -v -i backoffice-box -p 22 <remote AWS instance user pwd, eg: awsadmin>@backoffice.maxmin.it

###################################################################
# Access Java web site at:
###################################################################

https://backoffice.maxmin.it:8443/admin 

userid: admin
password: admin

###################################################################
# Delete the datacenter and the web application:
###################################################################

cd backoffice-prj/bin
chmod +x delete.sh

./delete.sh



