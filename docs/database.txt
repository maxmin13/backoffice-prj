
a Java application and a database cannot communicate directly, so they need a translator, which in software is called a DRIVER.
• We usually need one translator, the driver.
• We might use two, if we want to introduce a persistence layer such as Hibernate.
• We might use three, if we add Spring Data to easily map records to POJOs and handle transactions easily.

You can use Spring to manage the database connection for you by providing a bean that implements javax.sql.DataSource. 
The difference between a DataSource and a Connection is that a DataSource provides and manages connections.

Instances of the JdbcTemplate class are thread-safe, once configured. 
This is important because it means that you can configure a single instance of a JdbcTemplate
and then safely inject this shared reference into multiple DAOs (or repositories). 
The JdbcTemplate is stateful, in that it maintains a reference to a DataSource, but this state is not conversational state.

MariaDB supported joins:

INNER JOIN: 
LEFT JOIN: outer join starting from the left table
RIGHT JOIN: outer join starting from the right table
CROSS JOIN: Cartesian product

Transactions:

https://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html#set_roll_back_savepoints
https://www.marcobehler.com/guides/spring-transaction-management-transactional-in-depthv

https://stackoverflow.com/questions/41825832/how-to-show-transaction-isolation-level-mysql


mariadb -u root -p'rootpwd' -h 172.18.0.2 -P 3306 -D backofficedb

Select * from User where AccountName='maxmin13';
update User set FirstName='Max2', LastName='Min2' where AccountName='maxmin13';

set autocommit=0;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
SELECT @@transaction_ISOLATION;

SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SELECT @@session.transaction_ISOLATION;

SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SELECT @@global.transaction_ISOLATION;

