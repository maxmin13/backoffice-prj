- name: Deploy backoffice web application
  hosts:
    - class_javawebservices
    
  gather_facts: false
  
  vars_files:
    - variables/provision.yml
    - variables/secrets.yml
    
  vars:
    ansible_python_interpreter: "{{ aws.instance.venv.dir.path }}/bin/python" 
          
  pre_tasks:
  
    - name: 'Get datacenter.json content'
      set_fact:
        datacenter_config: "{{ lookup('file', '{{ backoffice_dir }}/config/datacenter.json') | from_json }}"
        
    - name: 'Get instance DNS domain'
      set_fact:
        instance_dns_domain: "{{ datacenter_config | json_query(jquery) }}"
      vars:
        jquery: "Datacenter.Instances[?Name=='{{ instance_name }}'] | [0].DnsDomain"    

    - name: 'Configuration variables'
      ansible.builtin.debug:
        msg:
          - 'SSH port: {{ ansible_port }}'
          - 'SSH user: {{ ansible_user }}'
          - 'SSH key: {{ ansible_private_key_file }}'
          - 'AWS instance domain: {{ instance_dns_domain }}'
                 
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent      
        
    - name: Create virtualenv
      become: true
      ansible.builtin.pip:
        name:
          - pip
          - wheel
          - setuptools
        state: latest
        virtualenv: "{{ aws.instance.venv.dir.path }}"
        virtualenv_command: "{{ aws.instance.python.install.dir.path }}/{{ aws.instance.python.executable }} -m venv"      

    - name: Upload requirements
      copy:
        src: requirements.txt
        dest: "{{ aws.instance.download.dir.path }}"
        mode: '0644'

    - name: Install required packages
      become: true
      ansible.builtin.pip:
        virtualenv: "{{ aws.instance.venv.dir.path }}"
        requirements: "{{ aws.instance.download.dir.path }}/requirements.txt"           
                  
  tasks:
   
    - name: Create download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 488   
 
    - name: Create database user with all database privileges
      community.mysql.mysql_user:
        name: "{{ aws.instance.mariadb.user.admin.name }}"
        password: "{{ mariadb_admin_user_password }}"
        priv: '*.*:ALL'
        state: present
        login_user: root
        login_password: "{{ mariadb_root_user_password }}"         
              
    - name: Create a new database
      community.mysql.mysql_db:
        name: "{{ aws.instance.mariadb.database.name }}"
        state: present
        login_user: "{{ aws.instance.mariadb.user.admin.name }}"
        login_password: "{{ mariadb_admin_user_password }}"
                   
    - name: Start MariaDB server
      become: true  
      ansible.builtin.systemd_service:
        state: restarted
        enabled: true
        name: mariadb   
        
    - name: Create the migration source directory on the server
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}/migration"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 488 
        
    - name: Upload the migration scripts to the server
      copy:
        src: "files/database/migration/"
        dest: "{{ aws.instance.download.dir.path }}/migration"
        remote_src: false                        

    - name: Run the database migrations
      mysql_database_migration:
        login_user: "root"
        login_password: "{{ mariadb_root_user_password }}"     
        database_name: "{{ aws.instance.mariadb.database.name }}"
        migration_table: migration
        source: "{{ aws.instance.download.dir.path }}/migration"
        goto: 3

  post_tasks:

    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent 
         
